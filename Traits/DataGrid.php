<?php

namespace Easyui\Traits;

use Easyui\Enums\DatagridPagePosition;
use Easyui\Enums\DatagridResizeHandle;
use Easyui\Enums\DatagridSortOrder;
use Easyui\Js;

/**
 * Property/Params
 * @method $this pColumns(array $columns) [The datagrid columns config object, see column properties for more details.]
 * @method $this pFrozenColumns(array $frozenColumns) [Same as the columns property, but the these columns will be frozen on left.]
 * @method $this pFitColumns(bool $fitColumns) [True to auto expand/contract the size of the columns to fit the grid width and prevent horizontal scrolling.]
 * @method $this pResizeHandle(DatagridResizeHandle $resizeHandle) [Resizing column position, Available value are: 'left', 'right', 'both'. When 'right', users can resize columns by dragging the right edge of column headers, etc.]
 * @method $this pResizeEdge(int $resizeEdge) [The resizing column edge.]
 * @method $this pAutoRowHeight(bool $autoRowHeight) [Defines if set the row height based on the contents of that row. Set to false can improve loading performance.]
 * @method $this pToolbar(array|string $toolbar) [The top toolbar of datagrid panel. Possible values: <br>1) an array, each tool options are same as linkbutton. <br>2) a selector that indicate the toolbar.]
 * @method $this pStriped(bool $striped) [True to stripe the rows.]
 * @method $this pMethod(string $method) [The method type to request remote data.]
 * @method $this pNowrap(bool $nowrap) [True to display data in one line. Set to true can improve loading performance.]
 * @method $this pIdField(string $idField) [Indicate which field is an identity field.]
 * @method $this pUrl(string $url) [A URL to request data from remote site.]
 * @method $this pData(array $data) [The data to be loaded.]
 * @method $this pLoadMsg(string $loadMsg) [When loading data from remote site, show a prompt message.]
 * @method $this pEmptyMsg(string $emptyMsg) [The message to be shown when no records exist.]
 * @method $this pPagination(bool $pagination) [True to show a pagination toolbar on datagrid bottom.]
 * @method $this pRownumbers(bool $rowNumbers) [True to show a row number column.]
 * @method $this pSingleSelect(bool $singleSelect) [True to allow selecting only one row.]
 * @method $this pCtrlSelect(bool $ctrlSelect) [True to only allow multi-selection when ctrl+click is used.]
 * @method $this pCheckOnSelect(bool $checkOnSelect) [If true, the checkbox is checked/unchecked when the user clicks on a row. If false, the checkbox is only checked/unchecked when the user clicks exactly on the checkbox.]
 * @method $this pSelectOnCheck(bool $selectOnCheck) [If set to true, clicking a checkbox will always select the row. If false, selecting a row will not check the checkbox.]
 * @method $this pScrollOnSelect(bool $scrollOnSelect) [If set to true, scroll to the row automatically when selecting it.]
 * @method $this pPagePosition(DatagridPagePosition $pagePosition) [Defines position of the pager bar. Available values are: 'top', 'bottom', 'both'.]
 * @method $this pPageNumber(int $pageNumber) [When set pagination property, initialize the page number.]
 * @method $this pPageSize(int|Js $pageSize) [When set pagination property, initialize the page size.]
 * @method $this pPageList(array $pageList)[When set pagination property, initialize the page size selecting list.]
 * @method $this pQueryParams(array $queryParams) [When request remote data, sending additional parameters also.]
 * @method $this pSortName(string $sortName) [Defines which column can be sorted.]
 * @method $this pSortOrder(DatagridSortOrder $sortOrder) [Defines the column sort order, can only be 'asc' or 'desc'.]
 * @method $this pMultiSort(bool $multiSort) [Defines if to enable multiple column sorting.]
 * @method $this pRemoteSort(bool $remoteSort) [Defines if to sort data from server.]
 * @method $this pShowHeader(bool $showHeader) [Defines if to show row header.]
 * @method $this pShowFooter(bool $showFooter) [Defines if to show row footer.]
 * @method $this pScrollbarSize(int $scrollbarSize) [The scrollbar width(when scrollbar is vertical) or height(when scrollbar is horizontal).]
 * @method $this pRownumberWidth(int $rownumberWidth) [The width of the row number column.]
 * @method $this pEditorHeight(int $editorHeight) [The default height of the editors.]
 * @method $this pRowStyler(string $rowStyler) [Return style such as 'background:red'. The function take two parameters: <br>rowIndex: the row index, start with 0 <br>rowData: the record corresponding to this row]
 * @method $this pLoader(string $loader) [Defines how to load data from remote server. Return false can abort this action. This function takes following parameters: <br>param: the parameter object to pass to remote server.<br>success(data): the callback function that will be called when retrieve data successfully.<br>error(): the callback function that will be called when failed to retrieve data.]
 * @method $this pLoadFilter(string $loadFilter) [Return the filtered data to display. The function take one parameter 'data' that indicate the original data. You can change original source data to standard data format. This function must return standard data object that contain 'total' and 'rows' properties.]
 * @method $this pEditors(array $editors) [Defines the editor when editing a row.]
 * @method $this pView(array $view) [Defines the view of datagrid.]
 *
 * Event
 * @method $this eOnLoadSuccess(Js $onLoadSuccess) [Fires when data is loaded successfully.]
 * @method $this eOnLoadError(Js $onLoadError) [Fires when some errors occur to load remote data.]
 * @method $this eOnBeforeLoad(Js $onBeforeLoad) [Fires before a request is made to load data. If return false the load action will be canceled.]
 * @method $this eOnClickRow(Js $onClickRow) [Fires when the user clicks a row, the parameters contains:<br>index: the clicked row index, start with 0<br>row: the record corresponding to the clicked row]
 * @method $this eOnDblClickRow(Js $onDblClickRow) [Fires when the user double clicks a row, the parameters contains:<br>index: the clicked row index, start with 0<br>row: the record corresponding to the clicked row]
 * @method $this eOnClickCell(Js $onClickCell) [Fires when the user clicks a cell.]
 * @method $this eOnDblClickCell(Js $onDblClickCell) [Fires when the user double clicks a cell.]
 * @method $this eOnBeforeSortColumn(Js $onBeforeSortColumn) [Fires before the user sorts a column, return false to cancel this action.]
 * @method $this eOnSortColumn(Js $onSortColumn) [Fires when the user sorts a column, the parameters contains:<br>sort: the sort column field name<br>order: the sort column order]
 * @method $this eOnResizeColumn(Js $onResizeColumn) [Fires when the user resizes the column.]
 * @method $this eOnBeforeSelect(Js $onBeforeSelect) [Fires before the user selects a row, return false to cancel this action.]
 * @method $this eOnSelect(Js $onSelect) [Fires when the user selects a row, the parameters contains:<br>index: the selected row index, start with 0<br>row: the record corresponding to the selected row]
 * @method $this eOnBeforeUnselect(Js $onBeforeUnselect) [Fires before the user unselects a row, return false to cancel this action.]
 * @method $this eOnUnselect(Js $onUnselect) [Fires when the user unselects a row, the parameters contains:<br>index: the unselected row index, start with 0<br>row: the record corresponding to the unselected row]
 * @method $this eOnSelectAll(Js $onSelectAll) [Fires when the user selects all rows.]
 * @method $this eOnUnselectAll(Js $onUnselectAll) [Fires when the user unselects all rows.]
 * @method $this eOnBeforeCheck(Js $onBeforeCheck) [Fires before the user checks a row, return false to cancel this action.]
 * @method $this eOnCheck(Js $onCheck) [Fires when the user checks a row, the parameters contains:<br>index: the checked row index, start with 0<br>row: the record corresponding to the checked row]
 * @method $this eOnBeforeUncheck(Js $onBeforeUncheck) [Fires before the user unchecks a row, return false to cancel this action.]
 * @method $this eOnUncheck(Js $onUncheck) [Fires when the user unchecks a row, the parameters contains:<br>index: the unchecked row index, start with 0<br>row: the record corresponding to the unchecked row]
 * @method $this eOnCheckAll(Js $onCheckAll) [Fires when the user checks all rows.]
 * @method $this eOnUncheckAll(Js $onUncheckAll) [Fires when the user unchecks all rows.]
 * @method $this eOnBeforeEdit(Js $onBeforeEdit) [Fires before the user starts editing a row, return false to cancel this action. The parameters contains:<br>index: the editing row index, start with 0<br>row: the record corresponding to the editing row]
 * @method $this eOnBeginEdit(Js $onBeginEdit) [Fires when a row goes into edit mode.]
 * @method $this eOnEndEdit(Js $onEndEdit) [Fires when finishing editing but before destroying editors.]
 * @method $this eOnAfterEdit(Js $onAfterEdit) [Fires after the user finishes editing, the parameters contains:<br>index: the editing row index, start with 0<br>row: the record corresponding to the editing row<br>changes: the changed field/value pairs]
 * @method $this eOnCancelEdit(Js $onCancelEdit) [Fires when the user cancels editing a row, the parameters contains:<br>index: the editing row index, start with 0<br>row: the record corresponding to the editing row]
 * @method $this eOnHeaderContextMenu(Js $onHeaderContextMenu) [Fires when the header of datagrid is right clicked.]
 * @method $this eOnRowContextMenu(Js $onRowContextMenu) [Fires when a row is right clicked.]
 *
 * Method
 * @method $this mOptions() [Return the options object.]
 * @method $this mGetPager() [Return the pager object.]
 * @method $this mGetPanel() [Return the panel object.]
 * @method $this mGetColumnFields(bool $frozen = false) [Return the column fields. If frozen setted to true the frozen column fields is returned.]
 * @method $this mGetColumnOption(string $field) [Return the specified column option.]
 * @method $this mResize(string $param) [Do resize and do layout.]
 * @method $this mLoad(array $param) [Load and show the first page rows. If the 'param' is specified, it will replace with the queryParams property. Usually do a query by passing some parameters, this method can be called to load new data from server.]
 * @method $this mReload(array $param) [Reload the rows. Same as the 'load' method but stay on current page.]
 * @method $this mReloadFooter(array $footer) [Reload the footer rows. Code examples:]
 * @method $this mLoading() [Display loading status.]
 * @method $this mLoaded() [Hide loading status.]
 * @method $this mFitColumns() [Make columns auto expand/collapse to fit datagrid width.]
 * @method $this mFixColumnSize(string|null $field) [Fix columns size. If 'field' parameter is not assigned, all columns size will be fixed.]
 * @method $this mFixRowHeight(string|null $index) [Fix the specified row height. If 'index' parameter is not assigned, all rows height will be fixed.]
 * @method string methodFreezeRow(string $index)[Freeze the specify row that will always be displayed at the top when the datagrid is scrolled down.]
 * @method $this mAutoSizeColumn(string $field) [Adjusts the column width to fit the contents.]
 * @method $this mLoadData(string|array $data) [Load local data, the old rows will be removed.]
 * @method $this mGetData() [Return the loaded data.]
 * @method $this mGetRows() [Return the current page rows.]
 * @method $this mGetFooterRows() [Return the footer rows.]
 * @method $this mGetRowIndex($row) [Return the specified row index, the row parameter can be a row record or an id field value.]
 * @method $this mGetChecked() [Return all rows where the checkbox has been checked.]
 * @method $this mGetSelected() [Return the first selected row record or null.]
 * @method $this mGetSelections() [Return all selected rows, when no record selected, an empty array will return .]
 * @method $this mClearSelections() [Clear all selections.]
 * @method $this mClearChecked() [Clear all checked rows.]
 * @method $this mScrollTo($index) [Scroll to the specified row.]
 * @method $this mGotoPage($param) [Go to the specified page.]
 * @method $this mHighlightRow($index) [Highlight a row.]
 * @method $this mSelectAll() [Select all current page rows.]
 * @method $this mUnselectAll() [Unselect all current page rows.]
 * @method $this mSelectRow(int $index) [Select a row, the row index start with 0.]
 * @method $this mSelectRecord(int $idValue) [Select a row by passing id value parameter.]
 * @method $this mUnselectRow($index) [Unselect a row.]
 * @method $this mCheckAll() [Check all current page rows.]
 * @method $this mUncheckAll() [Uncheck all current page rows.]
 * @method $this mCheckRow(int $index) [Check a row, the row index start with 0.]
 * @method $this mUncheckRow(int $index) [Uncheck a row, the row index start with 0.]
 * @method $this mBeginEdit($index) [Begin editing a row.]
 * @method $this mEndEdit($index) [End editing a row.]
 * @method $this mCancelEdit($index) [Cancel editing a row.]
 * @method $this mGetEditors($index) [Get the specified row editors. Each editor has the following properties:<br>actions: the actions that the editor can do, same as the editor definition.<br>target: the target editor jQuery object.<br>field: the field name.<br>type: the editor type, such as 'text', 'combobox', 'datebox', etc.]
 * @method $this mGetEditor($options) [Get the specified editor, the options contains two properties:<br>index: the row index.<br>field: the field name.]
 * @method $this mRefreshRow($index) [Refresh a row.]
 * @method $this mValidateRow($index) [Validate the specified row, return true when valid.]
 * @method $this mUpdateRow($param) [Update the specified row, the param contains following properties:<br>index: the row index to be updated.<br>row: the new row data.]
 * @method $this mAppendRow(array $row) [Append a new row. The new row will be added to the last position]
 * @method $this mInsertRow(array $param) [Insert a new row, the param contains following properties:<br>index: the row index to insert into, if not defined, append the new row.<br>row: the row data.]
 * @method $this mDeleteRow($index) [Delete a row.]
 * @method $this mGetChanges($type) [Get changed rows since the last commit. The type parameter indicate which type changed rows, possible value is: inserted, deleted, updated, etc. When the type parameter is not assigned, return all changed rows.]
 * @method $this mAcceptChanges() [Commits all the changes data since it was loaded or since the last time acceptChanges was called.]
 * @method $this mRejectChanges() [Rolls back all the changes data since it was created, or since the last time acceptChanges was called.]
 * @method $this mMergeCells(array $options) [Merge some cells to one cell, the options contains following properties:<br>index: the row index.<br>type: the row type, possible values are 'body', 'footer'.<br>field: the field name.<br>rowspan: the rowspan count to be merged.<br>colspan: the colspan count to be merged.]
 * @method $this mShowColumn(string $field) [Display the specified column.]
 * @method $this mHideColumn(string $field) [Hide the specified column.]
 * @method $this mSort(string|array $param) [Sort the datagrid.]
 */
trait DataGrid
{

}